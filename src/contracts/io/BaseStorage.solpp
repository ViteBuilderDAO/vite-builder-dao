// SPDX-License-Identifier: GPL-3.0
pragma soliditypp >=0.8.0 <0.9.0;


contract ContractStorage {
    uint storedData;

    message replyData(uint);

    onMessage set(uint x) {
        storedData = x;
    }
    
    onMessage requestData() {
        send(msg.sender, replyData(storedData));
    }
}

contract Accesser {
    uint copyData;

    message requestData();
    
    onMessage updateCopyData(address contractAddr){
        send(contractAddr, requestData());
    }
    
    onMessage replyData(uint x){
        copyData = x;
    }

    getter get() returns(uint){
        return copyData;
    }
}

// Message and Send
//
// A message is a data structure containing the call signature that cooresponds to a message listener.
// A message can then be populated with data and sent to an address using send.
// If there is a cooresponding message listener at the target address, that function will be called.
// However, send is non-blocking, and the contract receiving a message may execute the function call
// at a later time. This does require some consideration.

// How it works
//
// In this example, the contract ContractStorage has the same storedData and set functions as our 
// SimpleStorage contract did, but there is no getter function. Instead, there is a requestData
// function which will reply to the sender with a replyData message using send.
//
// Meanwhile, the Accesser contract is designed to store a copy of the data contained in ContractStorage.
// A user calls the updateCopyData function with the address of the ContractStorage contract, to initiate
// the update process. Accesser will send a requestData message to ContractStorage, which will react to
// the request and respond with a replyData message, allowing Accesser to update it's local copy copyData.