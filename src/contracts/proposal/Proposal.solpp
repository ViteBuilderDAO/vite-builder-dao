pragma soliditypp ^0.4.3;

contract DefaultProposal
{
  // Used for tracking individual option voting stats
  // Stats are used at proposal completion to calculate results
  struct OptionsVotingStats
  {
    uint m_optionTotalVotes;
    uint m_optionVotingPower;
  }

  // Proposal Type Obj and it's map container
  struct ProposalObj
  {
    string m_id;
    address m_creator;
    uint m_publishDate;
    uint m_deadline;
    mapping(uint => OptionsVotingStats) m_optVoteStatsMap;
    uint m_totalVotingPower;
    uint m_totalVotes;
    mapping(address => bool) m_prevVotersMap;
  }

  // Global proposals container
  mapping(string => ProposalObj) g_ProposalsMap;

  // Address of the contract creator
  address g_contractOwner;

  // Number of proposals total
  uint g_TotalNumProposals;
  // Number of proposals active
  uint g_TotalActiveProposals;
  // Number of proposals approved
  uint g_TotalApprovedProposals;
  // Number of proposals rejected
  uint g_TotalRejectedProposals;
  // Number of proposals cancelled
  uint g_TotalCancelledProposals;

  // Event that will be emitted whenever a new proposal is created
  event ProposalStartedEvent(string proposalID, address proposalCreator, uint proposalDeadline, uint totalNumProposals, uint totalActiveProposals);

  // Event that will be emitted whenever a proposal ends
  event ProposalEndedEvent(string proposalID, address proposalCreator, uint endDate);

  // Event emitted whenever a proposal receives a vote
  event ProposalVotedOnEvent(string proposalID, address proposalVoter, uint totalVotingPower, uint totalVotes);


  /** @dev Contract Constructor
    */
  constructor() public
  {
    g_contractOwner = msg.sender;
  }


  /** @dev Function to start a new proposal.
    *
    */
  onMessage startProposal(string calldata id, address creator, uint durationInHours, uint numOptions)
  {
    uint proposalDeadline = (now + (durationInHours * 1 hours));

    g_ProposalsMap[id] = (ProposalObj(id, creator, now, proposalDeadline, 0, 0));

    for (uint i = 0; i < numOptions; ++i)
    {
      g_ProposalsMap[id].m_optVoteStatsMap[i] = OptionsVotingStats(0, 0);
    }

    ++g_TotalNumProposals;
    ++g_TotalActiveProposals;

    emit ProposalStartedEvent(id, creator, proposalDeadline, g_TotalNumProposals, g_TotalActiveProposals);
  }


  /** @dev Function to vote on a given proposal.
    *
    */
  onMessage voteOnProposal(string calldata proposalID, address voter, uint voterPower, uint[] calldata optPowers)
  {
    require(!g_ProposalsMap[proposalID].m_prevVotersMap[voter]);
    require(now < g_ProposalsMap[proposalID].m_deadline);

    uint proposalTotalPower = g_ProposalsMap[proposalID].m_totalVotingPower + voterPower;
    uint proposalTotalVotes = ++g_ProposalsMap[proposalID].m_totalVotes;
    g_ProposalsMap[proposalID].m_totalVotingPower += voterPower;
    g_ProposalsMap[proposalID].m_prevVotersMap[voter] = true;

    for (uint i = 0; i < optPowers.length; ++i)
    {
      ++g_ProposalsMap[proposalID].m_optVoteStatsMap[i].m_optionTotalVotes;
      g_ProposalsMap[proposalID].m_optVoteStatsMap[i].m_optionVotingPower += optPowers[i];
    }

    emit ProposalVotedOnEvent(proposalID, voter, proposalTotalPower, proposalTotalVotes);
  }


  /** @dev Stop the proposal early if desired (mostly for testing purposes)
    *
    */
  onMessage stopProposalEarly(string calldata proposalID)
  {
    require(g_ProposalsMap[proposalID].m_creator == msg.sender);

    emit ProposalEndedEvent(proposalID, g_ProposalsMap[proposalID].m_creator, now);
  }


  /**
    */
  getter getProposalStats() returns(uint total, uint active, uint approved, uint rejected, uint cancelled)
  {
    total = g_TotalNumProposals;
    active = g_TotalActiveProposals;
    approved = g_TotalApprovedProposals;
    rejected = g_TotalRejectedProposals;
    cancelled = g_TotalCancelledProposals;
  }


  /**
    */
  getter getProposalVotingStats(string calldata proposalID) returns(uint totalVotingPower, uint totalVotes)
  {
    totalVotingPower = g_ProposalsMap[proposalID].m_totalVotingPower;
    totalVotes = g_ProposalsMap[proposalID].m_totalVotes;
  }


  /**
    */
  getter getProposalByID(string calldata proposalID) returns (
    address creator,
    uint publishDate,
    uint deadline,
    uint totalVotingPower,
    uint totalVotes)
  {
    creator = g_ProposalsMap[proposalID].m_creator;
    publishDate = g_ProposalsMap[proposalID].m_publishDate;
    deadline = g_ProposalsMap[proposalID].m_deadline;
    totalVotingPower = g_ProposalsMap[proposalID].m_totalVotingPower;
    totalVotes = g_ProposalsMap[proposalID].m_totalVotes;
  }


  /**
    */
  getter checkIfVotedPreviously(address voter, string calldata proposalID) returns (bool hasVoted)
  {
    hasVoted = g_ProposalsMap[proposalID].m_prevVotersMap[voter];
  }


  /**
    */
  getter getIsProposalComplete(string calldata proposalID) returns(bool isComplete)
  {
    if (now > g_ProposalsMap[proposalID].m_deadline)
    {
      return true;
    }

    return false;
  }


  /** @dev Function to change the proposal state depending on conditions.
    *
    */
  function _checkIsComplete(string memory proposalID) internal returns(bool)
  {
    // require(g_ProposalsMap[proposalID].m_creator == msg.sender);

    if (now > g_ProposalsMap[proposalID].m_deadline)
    {
      emit ProposalEndedEvent(proposalID, g_ProposalsMap[proposalID].m_creator, now);
      return true;
    }

    return false;
  }
}
